# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ pkgs, config, lib, modulesPath, ... }:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ "nvidia" "i915" "nvidia_modeset" "nvidia_drm" ];
  boot.extraModulePackages = [];

  boot = {
    kernel.sysctl = {
      # Improved file monitoring
      "fs.file-max" = lib.mkDefault 2097152; # Set size of file handles and inode cache
      "fs.inotify.max_user_instances" = lib.mkOverride 100 8192; # Re-use the default from Bazzite even though the default NixOS value is higher.
      # "fs.inotify.max_user_watches" = lib.mkOverride 100 524288;

      "kernel.nmi_watchdog" = lib.mkOverride 100 0; # Disable watchdogs for maximum performance at the cost of resiliency
      "kernel.sched_cfs_bandwidth_slice_u" = lib.mkDefault 3000;
      "kernel.sched_latency_ns" = lib.mkDefault 3000000;
      "kernel.sched_migration_cost_ns" = lib.mkDefault 50000;
      "kernel.sched_min_granularity_ns" = lib.mkDefault 300000;
      "kernel.sched_nr_migrate" = lib.mkDefault 128;
      "kernel.sched_wakeup_granularity_ns" = lib.mkDefault 500000;
      "kernel.soft_watchdog" = lib.mkDefault 0;
      "kernel.split_lock_mitigate" = lib.mkDefault 0;
      "kernel.unprivileged_userns_clone" = lib.mkDefault 1;
      "kernel.watchdog" = lib.mkDefault 0;

      # Network optimizations
      "net.core.default_qdisc" = lib.mkDefault "fq";
      "net.core.netdev_max_backlog" = lib.mkDefault 16384; # Increase netdev receive queue
      "net.ipv4.tcp_congestion_control" = lib.mkDefault "bbr";
      "net.ipv4.tcp_ecn" = lib.mkDefault 1;
      "net.ipv4.tcp_fastopen" = lib.mkDefault 3;
      "net.ipv4.tcp_fin_timeout" = lib.mkDefault 5;
      "net.ipv4.tcp_mtu_probing" = lib.mkForce 1;
      "net.ipv4.tcp_rfc1337" = lib.mkDefault 1; # Protect against tcp time-wait assassination hazards, drop RST packets for sockets in the time-wait state. Not widely supported outside of Linux, but conforms to RFC.
      "net.ipv4.tcp_slow_start_after_idle" = 0; # Disable TCP slow start after idle
      "net.ipv4.tcp_timestamps" = lib.mkDefault 0; # https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/reduce_tcp_performance_spikes

      # Memory management
      "vm.dirty_background_bytes" = lib.mkDefault 134217728;
      "vm.dirty_bytes" = lib.mkDefault 268435456;
      "vm.dirty_writeback_centisecs" = lib.mkDefault 1500;
      "vm.max_map_count" = lib.mkOverride 100 2147483642;
      "vm.page-cluster" = lib.mkDefault 0;
      "vm.swappiness" = lib.mkDefault 150;
      "vm.vfs_cache_pressure" = lib.mkDefault 50;
      "vm.watermark_boost_factor" = lib.mkDefault 0;
      "vm.watermark_scale_factor" = lib.mkDefault 125;
    };
    kernelModules = ["ntsync"];
    # kernelPackages = pkgs.linuxPackages_cachyos;
    kernelPackages = with pkgs; linuxPackagesFor linuxPackages_cachyos;
  };

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/e6d163d9-2535-484a-9da7-7dd51ad6c0f9";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/6278-E66D";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.bluetooth.enable = true; # enables support for Bluetooth
  hardware.bluetooth.powerOnBoot = true; # powers up the default Bluetooth controller on boot

  # Enable sound with pipewire.
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;

    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  hardware.graphics = {
    enable = true;
    enable32Bit = true;   # required for many Steam games (32-bit Vulkan/OpenGL)
  };

  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {
    # Modesetting is required.
    modesetting.enable = true;
    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead 
    # of just the bare essentials.
    powerManagement.enable = false;
    prime = {
      offload = {
        enable = true;
        enableOffloadCmd = false;
      };
      # integrated
      intelBusId = "PCI:0:0:0";
      # dedicated
      nvidiaBusId = "PCI:1:0:0";
    };
    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;
    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of 
    # supported GPUs is at: 
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
    # Only available from driver 515.43.04+
    open = false;
    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;
    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
}
